---!
    from utils import WIDTHS, DEV, imgurl, srcset, images, Env

- def head(title, description='', favicon='/favicon.ico', icon='icon', icon_size='', screenshot='screenshot', color=Env.color, gif='')
    title ${title}
    link href="${favicon}" rel="shortcut icon"
    link href="/css/app.css" rel="stylesheet"
    meta rel="canonical" href="https://${Env.domain}/"
    meta charset="utf-8"
    meta name="viewport" content=(
      "width=device-width, "
      "initial-scale=1.0, " +
      "maximum-scale=6.0, " +
      "shrink-to-fit=no")
    meta itemprop="description" content="${description}"
    meta itemprop="name" content="${title}"
    meta name="apple-mobile-web-app-status-bar-style" content="black"
    meta name="description" content="${description}"
    meta http-equiv="Accept-CH" content="DPR, Viewport-Width, Width"

    -if gif
        meta itemprop="image" content="${gif}"
        meta name="image" content="${gif}"
        meta property="og:image" content="${gif}"
        meta property="og:image:type" content="image/gif"
    -elif webp
        meta itemprop="image" content="${webp}"
        meta name="image" content="${webp}"
        meta property="og:image" content="${webp}"
        meta property="og:image:type" content="image/webp"
    -else
        meta itemprop="image" content="${imgurl(screenshot, 1200, convert_to='webp')}"
        meta name="image" content="${imgurl(screenshot, 1200, convert_to='webp')}"
        meta property="og:image" content="${imgurl(screenshot, 1200, convert_to='webp')}"

    meta name="mobile-web-app-capable" content="no"
    meta name="msapplication-TileColor" content="${color}"
    meta name="msapplication-TileImage" content="https://${Env.domain}/img/${icon}.png"
    meta name="theme-color" content="${color}"
    meta property="og:description" content="${description}"
    meta property="og:site_name" content="${title}"
    meta property="og:title" content="${title}"
    meta property="og:type" content="website"
    meta property="og:url" content="https://${Env.domain}/"
    / meta name="twitter:site" content="${Env.twitter}"
    meta name="twitter:title" content="${title}"
    meta name="twitter:description" content="${description}"
    meta name="twitter:card" content="summary_large_image"
    meta property="twitter:image" content="${imgurl(screenshot, 1200, convert_to='webp')}"

    -if not DEV and Env.plausible_domain and Env.domain
        script async="true" defer="true" data-domain="${Env.domain}" src="https://${Env.plausible_domain}/js/plausible.js"
    -coffee
      if location.host != '${Env.domain}'
        domain = (location.host || 'localhost').split(':')[0]
        document.write "<script src=\"http://#{ '${ Env.domain }' }:35729/livereload.js?snipver=1\"><\/script>"


    - stylus
      @import "src/css/variables"
      @import "src/css/modernize"


- def videoset(video, cls, webm=True, poster=None)
    video.${cls} (autoplay muted loop disablePictureInPicture playsinline poster=${poster or "/img/${video}-poster/${video}-poster.webp"} )
          source src="/video/${video}-h265.mp4" type='video/mp4; codecs=hvc1'
        -if webm
          source src="/video/${video}-vp9.webm" type='video/webm; codecs=vp9'
        source src="/video/${video}-h264.mp4" type="video/mp4"

- def smallvideoset(video, cls, webm=True, poster=None)
    video.${cls} (autoplay muted loop disablePictureInPicture playsinline poster=${poster or "/img/${video}-poster/${video}-poster.webp"} )
          source src="/video/small/${video}-h265.mp4" type='video/mp4; codecs=hvc1'
        -if webm
          source src="/video/small/${video}-vp9.webm" type='video/webm; codecs=vp9'
        source src="/video/small/${video}-h264.mp4" type='video/mp4'

-def image(img, ext='png', width=1920, factor=0.4, mobile_factor=1, pcls='', icls='', alt='', fit='cover')
    picture.object-${fit}.${pcls}
          -call img=${img} ext=${ext} width=${width} factor=${factor} mobile_factor=${mobile_factor} self:sources
        img.object-${fit}.${icls} alt=${alt} srcset=${srcset(img, ext, width, factor)} title=${os.path.split(img)[-1]}

-def images(folder, ext='png', width=1920, factor=0.4, mobile_factor=1, acls='', pcls='', icls='')
    -for img in images(folder, ext)
        a.${acls} href="/img/${urllib.parse.quote(img)}.${ext}"
            -call img=${img} ext=${ext} width=${width} factor=${factor} mobile_factor=${mobile_factor} pcls=${pcls} icls=${icls} self:image

-def sources(img, ext='png', width=1920, factor=0.4, mobile_factor=1)
    -if not DEV
        source type="image/avif" srcset=${srcset(img, ext, width, mobile_factor, convert_to="avif")} media="(max-width: 767px)"
        source type="image/avif" srcset=${srcset(img, ext, width, factor, convert_to="avif")} media="(min-width: 768px)"
        source type="image/webp" srcset=${srcset(img, ext, width, mobile_factor, convert_to="webp")} media="(max-width: 767px)"
        source type="image/webp" srcset=${srcset(img, ext, width, factor, convert_to="webp")} media="(min-width: 768px)"
    source type="image/${ext}" srcset=${srcset(img, ext, width, mobile_factor)} media="(max-width: 767px)"
    source type="image/${ext}" srcset=${srcset(img, ext, width, factor)} media="(min-width: 768px)"
